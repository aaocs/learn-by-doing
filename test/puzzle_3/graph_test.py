import unittest
from ...src.puzzle_3.graph import Graph

class TestStringMethods(unittest.TestCase):

    def test_maximum_sum_example_0(self):
        # Example 0 is the top 3 rows of Example 1.
        g = Graph(7)

        g.add_vertex_data(0, 'A')
        g.add_vertex_data(1, 'B')
        g.add_vertex_data(2, 'C')
        g.add_vertex_data(3, 'D')
        g.add_vertex_data(4, 'E')
        g.add_vertex_data(5, 'F')
        g.add_vertex_data(6, 'G')

        g.add_edge(0, 1, 3)
        g.add_edge(0, 2, 4)
        g.add_edge(1, 3, 2)
        g.add_edge(1, 4, 1)
        g.add_edge(2, 4, 1)
        g.add_edge(2, 5, 7)

        start_weight = 5
        g.add_edge(3, 6, start_weight)
        g.add_edge(4, 6, start_weight)
        g.add_edge(5, 6, start_weight)

        path, distances, max_distance = g.dijkstra('A', 'G')
        print(f"Path: {path}, Distances: {distances}, Maximum Distance: {max_distance}")

        self.assertEqual(max_distance, 16)

    def test_maximum_sum_example_1(self):
        g = Graph(11)

        g.add_vertex_data(0, 'A')
        g.add_vertex_data(1, 'B')
        g.add_vertex_data(2, 'C')
        g.add_vertex_data(3, 'D')
        g.add_vertex_data(4, 'E')
        g.add_vertex_data(5, 'F')
        g.add_vertex_data(6, 'G')
        g.add_vertex_data(7, 'H')
        g.add_vertex_data(8, 'I')
        g.add_vertex_data(9, 'J')
        g.add_vertex_data(10, 'K')

        g.add_edge(0, 1, 3)
        g.add_edge(0, 2, 4)
        g.add_edge(1, 3, 2)
        g.add_edge(1, 4, 1)
        g.add_edge(2, 4, 1)
        g.add_edge(2, 5, 7)
        g.add_edge(3, 6, 0xc)
        g.add_edge(3, 7, 0xd)
        g.add_edge(4, 7, 0xd)
        g.add_edge(4, 8, 2)
        g.add_edge(5, 8, 2)
        g.add_edge(5, 9, 5)

        start_weight = 5
        g.add_edge(6, 10, start_weight)
        g.add_edge(7, 10, start_weight)
        g.add_edge(8, 10, start_weight)
        g.add_edge(9, 10, start_weight)

        path, distances, max_distance = g.dijkstra('A', 'K')
        print(f"Path: {path}, Distances: {distances}, Maximum Distance: {max_distance}")

        self.assertEqual(max_distance, 23)

    def test_maximum_sum_example_2(self):
        g = Graph(31)

        g.add_vertex_data(0, 'A')
        g.add_vertex_data(1, 'B')
        g.add_vertex_data(2, 'C')
        g.add_vertex_data(3, 'D')
        g.add_vertex_data(4, 'E')
        g.add_vertex_data(5, 'F')
        g.add_vertex_data(6, 'G')
        g.add_vertex_data(7, 'H')
        g.add_vertex_data(8, 'I')
        g.add_vertex_data(9, 'J')
        g.add_vertex_data(10, 'K')
        g.add_vertex_data(11, 'L')
        g.add_vertex_data(12, 'M')
        g.add_vertex_data(13, 'N')
        g.add_vertex_data(14, 'O')
        g.add_vertex_data(15, 'P')
        g.add_vertex_data(16, 'Q')
        g.add_vertex_data(17, 'R')
        g.add_vertex_data(18, 'S')
        g.add_vertex_data(19, 'T')
        g.add_vertex_data(20, 'U')
        g.add_vertex_data(21, 'V')
        g.add_vertex_data(22, 'W')
        g.add_vertex_data(23, 'X')
        g.add_vertex_data(24, 'Y')
        g.add_vertex_data(25, 'Z')
        g.add_vertex_data(26, 'AA')
        g.add_vertex_data(27, 'AB')
        g.add_vertex_data(28, 'AC')
        g.add_vertex_data(29, 'AD')
        g.add_vertex_data(30, 'AE')

        g.add_edge(0, 1, 0xa)
        g.add_edge(0, 2, 0x6)
        g.add_edge(0, 3, 0xc)
        g.add_edge(0, 4, 0xb)
        g.add_edge(1, 5, 0x9)
        g.add_edge(1, 6, 0xd)
        g.add_edge(1, 8, 0xe)
        g.add_edge(1, 9, 0xa)
        g.add_edge(2, 6, 0xd)
        g.add_edge(2, 7, 0x6)
        g.add_edge(2, 9, 0xa)
        g.add_edge(2, 10, 0x4)
        g.add_edge(3, 8, 0xe)
        g.add_edge(3, 9, 0xa)
        g.add_edge(3, 11, 0x9)
        g.add_edge(3, 12, 0x7)
        g.add_edge(4, 9, 0xa)
        g.add_edge(4, 10, 0x4)
        g.add_edge(4, 12, 0x7)
        g.add_edge(4, 13, 0x8)
        g.add_edge(5, 14, 0xe)
        g.add_edge(5, 15, 0xc)
        g.add_edge(5, 18, 0x4)
        g.add_edge(5, 19, 0xa)
        g.add_edge(6, 15, 0xc)
        g.add_edge(6, 16, 0xc)
        g.add_edge(6, 19, 0xa)
        g.add_edge(6, 20, 0xb)
        g.add_edge(7, 16, 0xc)
        g.add_edge(7, 17, 0x7)
        g.add_edge(7, 20, 0xb)
        g.add_edge(7, 21, 0x1)
        g.add_edge(8, 18, 0x4)
        g.add_edge(8, 19, 0xa)
        g.add_edge(8, 22, 0x9)
        g.add_edge(8, 23, 0xf)
        g.add_edge(9, 19, 0xa)
        g.add_edge(9, 20, 0xb)
        g.add_edge(9, 23, 0xf)
        g.add_edge(9, 24, 0xe)
        g.add_edge(10, 20, 0xb)
        g.add_edge(10, 21, 0x1)
        g.add_edge(10, 24, 0xe)
        g.add_edge(10, 25, 0x3)
        g.add_edge(11, 22, 0x9)
        g.add_edge(11, 23, 0xf)
        g.add_edge(11, 26, 0xa)
        g.add_edge(11, 27, 0x1)
        g.add_edge(12, 23, 0xf)
        g.add_edge(12, 24, 0xe)
        g.add_edge(12, 27, 0x1)
        g.add_edge(12, 28, 0x7)
        g.add_edge(13, 24, 0xe)
        g.add_edge(13, 25, 0x3)
        g.add_edge(13, 28, 0x7)
        g.add_edge(13, 29, 0x2)

        start_weight = 5
        g.add_edge(14, 30, start_weight)
        g.add_edge(15, 30, start_weight)
        g.add_edge(16, 30, start_weight)
        g.add_edge(17, 30, start_weight)
        g.add_edge(18, 30, start_weight)
        g.add_edge(19, 30, start_weight)
        g.add_edge(20, 30, start_weight)
        g.add_edge(21, 30, start_weight)
        g.add_edge(22, 30, start_weight)
        g.add_edge(23, 30, start_weight)
        g.add_edge(24, 30, start_weight)
        g.add_edge(25, 30, start_weight)
        g.add_edge(26, 30, start_weight)
        g.add_edge(27, 30, start_weight)
        g.add_edge(28, 30, start_weight)
        g.add_edge(29, 30, start_weight)

        path, distances, max_distance = g.dijkstra('A', 'AE')
        print(f"Path: {path}, Distances: {distances}, Maximum Distance: {max_distance}")

        self.assertEqual(max_distance, 46)

if __name__ == '__main__':
    unittest.main()
